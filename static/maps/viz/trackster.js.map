{"version":3,"sources":["viz/trackster.js"],"names":["_","ui","view","Base","this","initialize","apply","arguments","extend","Backbone","Model","TracksterUI","baseURL","_utils2","default","cssLoadFile","save_viz","Galaxy","modal","show","title","body","bookmarks","each","position","children","text","annotation","overview_track_name","overview_drawable","config","get_value","viz_config","to_dict","viewport","chrom","start","low","end","high","overview","$","ajax","url","root","type","dbkey","vis_json","JSON","stringify","success","vis_info","hide","vis_id","window","location","hash","error","menu","_iconButton2","create_icon_buttons_menu","icon_class","select_datasets","new_tracks","track","add_drawable","_tracks2","object_from_template","on_click","DrawableGroup","name","css","self","handle_unsaved_changes","placement","buttonMenu","add_bookmark","editable","bookmarks_container","new_bookmark","addClass","appendTo","position_div","click","go_to","delete_icon_container","prependTo","remove","has_changes","annotation_div","num_rows","help_text","make_text_editable","use_textarea","create_visualization","view_config","viewport_config","drawables_config","bookmarks_config","header","editor","when","load_chroms_deferred","undefined","overview_drawable_name","change_chrom","chrom_info","i","length","drawables","set_overview","bookmark","set_up_router","options","_visualization2","TrackBrowserRouter","history","init_keyboard_nav","document","keyup","e","srcElement","is","which","move_fraction","Math","round","viewport_container","height","scrollTop","buttons","Cancel","Save","then","TracksterView","View","createButtonMenu","$el","attr","append","galaxy_config","force_right_panel","app","id","view_existing","choose_existing_or_new","get","listTracksParams","dataset_id","hda_ldda","gene_region","dataset_params","_queryStringParsing2","View in saved visualization","view_in_saved","tracks_grid","_gridView2","embedded","Add to visualization","parent","find","val","param","view_new","data","init_editor","alert","response","default_dbkey","Create","create_browser","select2","dbkeys_in_genomes","map","r","contains","template_view_new","focus","html","trigger","container","GalaxyApp","add_dataset","data_type","dataType","track_data","on"],"mappings":"8iBAUYA,uMALRC,EAAK,KACLC,EAAO,KAuBPC,EAAO,WACHC,KAAKC,YACLD,KAAKC,WAAWC,MAAMF,KAAMG,YAGpCJ,EAAKK,OAASC,SAASC,MAAMF,OAK7B,IAAIG,EAAcR,EAAKK,QACnBH,WAAY,SAASO,GACjBC,EAAAC,QAAUC,YAAY,kCACtBF,EAAAC,QAAUC,YAAY,yCACtBF,EAAAC,QAAUC,YAAY,mDA3C9BF,EAAAC,QAAAC,YAAA,4BA6CQF,EAAAC,QAAUC,YAAY,8BACtBX,KAAKQ,QAAUA,GAMnBI,SAAU,WAENC,OAAOC,MAAMC,MAAOC,MAAO,YAAaC,KAAM,aAG9C,IAAIC,KA5BRnB,EAAAA,aAAOoB,KAAA,WACHD,EAAKjB,MACLmB,SAAKnB,EAAWC,MACnBmB,SAAA,aAHLC,OAKAC,WAAuBjB,EAAAA,MA8BFe,SAAS,eA5B9BC,WAKQ,IAAAE,EAAUb,EAAVc,kBAAsB3B,EAAA2B,kBAAtBC,OAAAC,UAAA,QAAA,KAEAC,GACA9B,KAAAA,EAAA+B,UACAC,UACAC,MAAKvB,EAAUA,MAPOwB,MAAAlC,EAAAmC,IAsCdC,IAAKpC,EAAKqC,KA5BtBC,SAAAZ,GA+BQN,UAAWA,GAIf,OAAOmB,EAAEC,MA5BTC,IAAA1B,OAAA2B,KAAA,qBACAC,KAAIvB,OACJmB,SAAE,OACEnB,MACIE,GAAAA,EAAAA,OAGAG,MAAAA,EAAAA,OAAcI,UACTN,QALMqB,MAAf5C,EAAA4C,MADJD,KAAA,YAmCQE,SAAUC,KAAKC,UAAUjB,MAG5BkB,QAAQ,SAAAC,GAxBTnB,OAAAA,MAAaoB,OACblD,EAAAA,OAAW+B,EADEoB,OAEbnB,EAAAA,aAAU,EAGNI,OAAAA,QAAUC,aAHJ,GAAAY,EAAAR,IAAAW,OAAAC,SAAAC,QAAAC,MAFG,WAAjBxC,OAAAC,MAAAC,MAmCYC,MAAO,iBAxBnBC,KAAA,wDACOoB,SACKxB,OAAR,WADUA,OAAAC,MAAAkC,cAaNnC,iBAAAA,WACAf,IAAAA,EAAAA,KA0BJwD,EAAOC,EAAA7C,QAAa8C,2BAxCjBC,WAoBI,cACHzC,MAAA,aACAH,SAAaE,WACTC,EAAAA,QAAO0C,iBADOhB,MAAA5C,EAAA4C,OAAA,SAAAiB,GAER/D,EAAAuB,KAAAwC,EAAA,SAAAC,GACG9D,EAAA+D,aAAAC,EAAApD,QAAAqD,qBAAAH,EAAA9D,EAAAA,WAzBrB2D,WAAA,cA7CsBzC,MAAA,YAqGVgD,SAAU,WAtB1BlE,EAAA+D,aAwBwB,IAAIC,EAAApD,QAAOuD,cAAcnE,EAAMA,GAC3BoE,KAAM,kBAflBlD,WAAO,YACPgD,MAAU,YACNA,SAAA,WAEQlE,kBAAyBiE,OAApBF,EAAAA,aAAaM,IAAA,SAAOJ,OAAP,WAKlCN,WAAA,QACIA,MAAAA,WACAzC,SAAO,WACPgD,OAAUb,SAAAiB,EAAW5D,QAArBwD,6BAAqBlE,EAAAmD,UAMpBQ,WAAA,cAELzC,MAAA,OACIyC,SAAY,WACLW,EAAAxD,cAIN6C,WAAA,eAELzC,MAAA,QACIyC,SAAY,WACLW,EAAAC,uBAFXvE,OAQI2D,gBAAYa,UADhB,YAAA,OAKKtE,KAAAuE,WAAAjB,EAELA,GAAAkB,aAQJ,SAAApD,EAAAG,EAAAkD,GAAA,IAAAC,EAtDJrC,EAAA,8BA2DAsC,EAAAtC,EAAA,UACAuC,SAAOtB,YAjJeuB,SAAAH,GAoJ1BI,EAAAzC,EAAA,UAYSuC,SAAS,YACTC,SAASF,GAMN7E,GAfRuC,EAAA,gBACAf,KAAIoD,GAYCG,SAASC,GAVdC,MAAIJ,WAIAG,OAQIhF,EAAKkF,MAAM5D,IARf0D,IAQe1D,EAAAA,UACXE,KAAAC,GALYsD,SAApBF,IAaA,GAAIF,EAAU,CADd,IAAAQ,EAAA5C,EAAA,UACIoC,SAAU,yBACVS,UAAID,GAIIF,MAAA,WAJR,OAMQJ,EAAaQ,QAAb,QACArF,EAAKsF,SACLtF,EAAAsF,aAAA,GARR,IAWkB/C,EAAE,gBAIpBgD,SAAAA,sBAEQC,SAAAA,GAEAC,EAJRC,oBAOHF,SAAA,EAJWG,cAAc,EAMrBL,UAAc,uBAzMGR,SAAA,cA0MtB,OADA9E,EAAKsF,aAAc,EACZT,GAMXe,qBAAsB,SAASC,EAAaC,EAAiBC,EAAkBC,EAAkBrB,GAO7FpC,IAAAA,EAAOvC,KAEHA,EAAA,IAAI8F,EAAAA,QAAAA,cAAiBhG,EAAAQ,OAAAuF,GAAAI,QAAA,KAsDzB,OApDQjG,EAAAkG,QAAA,EACA3D,EAAA4D,KAAAnG,EAAAoG,sBAAUN,KAAgB1D,SAAAA,GAH9B,GAAI0D,EAAiB,CAMjB,IAAA7D,EAAIA,EAAmBoE,MACnBrG,EAAAA,EAAkBiC,MACrBG,EAFD0D,EAEO1D,IACHkE,EAAAR,EAAAxD,SAEHL,QAAAoE,IAAAnE,GAAAE,EAXLpC,EAYOuG,aAAAtE,EAAAC,EAAAE,GAGNpC,EAAAuG,aAAAC,EAAA,GAAAvE,YAIGjC,EAAAuG,aAAAC,EAAA,GAAAvE,OAIA,GAAA8D,EAMJ,IAAAU,EAAA,EAAAA,EAAAV,EAAAW,OAAAD,IACI9E,EAAAA,aAAJqC,EAAApD,QAAAqD,qBAAA8B,EAAAU,GAAAzG,EAAAA,IAMC,IAAAyG,EAAA,EAAAA,EAAAzG,EAAA2G,UAAAD,OAAAD,IAJG,GAAIzG,EAAK2G,UAAUF,GAAG7E,OAAOC,UAAU,UAAYyE,EAAwB,CAM/EtG,EAAA4G,aAAA5G,EAAA2G,UAAAF,IACIT,MAKC,GAAAA,EAHD,IAAK,IAIRa,EAJYJ,EAAI,EAAGA,EAAIT,EAAiBU,OAAQD,IAMjDI,EAAAb,EAAAS,GACAzG,EAAKsF,aAAcuB,EAAA,SAAnBA,EAAA,WAAAlC,GAAA3E,EAAKsF,aAAc,IAS3BpF,KAAA4G,eAAA9G,KAAAA,IAHWA,GAWX8G,cAAA,SAAAC,GAJI,IAAIC,EAAApG,QAAcqG,mBAAmBF,GACrCxG,SAAS2G,QAAQhF,SAWTiF,kBAAA,SAAAnH,GAHRuC,EAAE6E,UAAUC,MAAM,SAAAC,GAOd,IAAA/E,EAAA+E,EAAAC,YAAAC,GAAA,UAKQ,OAAAF,EAAAG,OACAzH,KAAAA,GACAA,EAAA0H,cAAA,KACJ,MACI1H,KAAAA,GACA2H,KAAAC,MAAA5H,EAAA6H,mBAAAC,SAAA,IACJ9H,EAAK6H,mBAALE,UAAA/H,EAAA6H,mBAAAE,YAAA,IACI,MACA/H,KAAAA,GACAA,EAAA0H,eAAA,KAdR,MAPJ,KAAA,GA/RsBC,KAAAC,MAAA5H,EAAA6H,mBAAAC,SAAA,IAmTV9H,EAAK6H,mBAAmBE,UAAU/H,EAAK6H,mBAAmBE,YAAc,QAc5E5G,uBAAM,SAAAnB,GACNgI,GAAAA,EAAAA,YAAS,CACLC,IAAAA,EAAAA,KACIlH,OAAAA,MAAAA,MACHG,MAAA,sBACDC,KAAA,8FACIoB,SACAa,OAAAA,WACHrC,OAPIC,MAAAkC,QASDX,uBAAYzB,WACRsC,EAAAA,QAAAA,IAAAA,gBACHA,OAFDC,SAAAtC,OAAA2B,KAEC,iBAXAwF,KAAA,WAHb3F,EAAA4D,KAAA7B,EAAAxD,YAAAqH,KAAA,WAkBG/E,OAAAC,SAAAtC,OAAA2B,KAAA,2BAMX0F,OAAAA,SAAyBC,OAAK/H,KAA9B8H,mBAAAA,EAAgB7H,SAAS8H,KAAK/H,QAO1BP,WAAGuI,YAEHvI,EAAA,IAAAU,EAAAM,OAAA2B,OAGA4F,mBAGAvI,EAAA0E,WAAA8D,IAAAC,KAAA,QAAA,gBAFAjG,EAAE,uCAAuCkG,OAAO1I,EAAG0E,WAAW8D,KAU1DvI,EAAAA,+BAAAyI,OAAA,aACHlG,EAAA,+BAFDkG,OAJI,gIAWJlG,EAAA,iBAAA0C,MAAA,WACAjF,EAAI0I,kBAIHC,kBAAM,QAlC0BD,cAAAE,IAAAC,GA+B7B3I,KAAK4I,gBAQbC,EAAAA,QAAwBC,IAAA,cACpB9I,KAAIoE,yBAEJpE,KAAI+I,YAIAC,uBAAY,WACZC,IAAAA,EAAAA,KACAC,EAAAA,EAAAA,QAAaJ,IAAA,SAJIC,KAOrBI,GACIJ,MAAAA,EACHC,WAAAI,EAAA1I,QAAAoI,IAAA,cANGG,SAAUG,EAAA1I,QAAaoI,IAAI,YAQ/BjI,YAAaE,EAAAA,QAAK+H,IAAA,gBAGd7H,IAEA6G,EAAS,WAAApF,GAGJ7B,OAAAC,MAHIC,MAILC,MAAA,6CAECC,KAAAA,iLANIyB,GAOL,kBADC,yFAEG0B,SACH2D,OAAA,WATI7E,OAAAC,SAAAtC,OAAA2B,KAAA,uBA5DoB6G,8BAAA,WAiErBjF,EAAKkF,cAAcH,IAUnCG,4BAAe,WACPC,EAAAA,gBAOAtI,cAAAA,SAAMsI,GACNzB,IAAAA,EAAS,IAAA0B,EAAA9I,SACLqH,SAAAA,OAAQvF,KAARuF,4BACI7E,aAAAA,EACHuG,UAHI,IAKDpH,OAAAA,MAAAA,MAGQ8G,MAAAA,kCACAjG,KAAAA,EAAAA,IACH4E,SACRC,OAAA,WAXI7E,OAAAC,SAAAtC,OAAA2B,KAAA,uBApFoBkH,uBAAA,WAyFrBrH,EAAEsH,OAAOzC,UAWzB0C,KAAA,0BACezI,KAAA,WACXgI,EAAAR,GAAAtG,EAAArC,MAAA6J,MACIjI,OAAa4G,SAAkB5G,OAAAA,KAA/BA,2BAAJS,EAAAyH,MAAAX,UAIIP,cAMAhH,WAMJ,IAAAA,EAAA4G,cAAAE,IAAA9G,WAbA9B,EAAOD,EAAG6F,sBAkBdqE,UAAU1H,EAAA,+BACN6B,KAAAtC,EAAAZ,MACIoD,OAAOxC,EAAXqB,OAfQP,MAAOd,EAAWc,OAkB1BL,EAAOP,SACHS,EAAQ1B,OACRmJ,EAAM9I,WACNmC,GAIIrD,KAAAiK,eAIInC,SAAAA,WAEQ5E,IAAAA,EAAAA,KAGAkB,EAAAA,MACAvD,IAAAA,OAAAA,KAAAA,8BACHmJ,QAPI3G,MAAA,WAHK6G,MAAlB,iCAcApH,QAAA,SAAAqH,GACqCtJ,OAAAC,MAAAC,MAAAC,MAArC,oBACAC,KAAIuH,EAAAA,kBAAkB4B,GAClB/H,SACH0F,OAAA,WAbW7E,OAAOC,SAActC,OAAO2B,KAA5B,uBAgBV6H,OAAA,WACAjG,EAAAkG,eAAwBC,EAAAA,cAA1BV,MAAAxH,EAAA,cAAAwH,OAbYhJ,OAAOC,MAAMkC,WAMzB,IAAIwH,EAAoBL,EAASM,IAAI,SAAAC,GAAA,OAAKA,EAAE,KAexDlC,cAAAE,IAAA0B,eAAAxK,EAAA+K,SAAAH,EAAAhC,cAAAE,IAAA0B,gBACAQ,EAAAA,cAAmBf,IAAArB,cAAS2B,IAAAA,eAgBxB9H,EAAA,cAAAwI,QACAxI,EAAK,wBAAwBmE,UAvBrBnE,EAAE,YAAY8B,IAAI,WAAY,YAkCzCyG,kBApMoC,SAAAT,GAwNpC,IAxNoC,IAsMrCW,EACAR,ycAvMqC/D,EAAA,EAAAA,EAAA4D,EAAA3D,OAAAD,IA0L7BuE,GAAAA,kBAA0BX,EAAS5D,GAAG,GAAtC,KAA6C4D,EAAS5D,GAAG,GAAzD,YAyCIyD,OANR3H,GAAAA,qHA9BIxB,OAAO2B,KA8BXH,oEAUSiI,eAAA,SAAApG,EAAAxB,GANEL,EAAA6E,UAAP6D,QAAA,qBASJjL,EAAAD,EAAA6F,sBAEIsF,UAAA3I,EAAA,+BACA6B,KAAI9C,EA/BAsB,MAAOA,GAkCX8F,cAAUhE,IAAAA,aAId3E,KAAAA,cAGIC,EAAAkG,QAAIlG,GAIXmK,YAAA,WA9BG5H,EAAE,gCAAgCf,KAAQxB,EAAK4B,OAAOC,UAAU,QAAhE,KAA4E7B,EAAK4C,MAAjF,KAmCJuI,cAAW/C,IAAAA,aA/BH7F,EAAEC,MACEC,IAAQ1B,OAAO2B,KAAf,gBAAmCgG,cAAcE,IAAIwC,YACrDlB,MAAQf,SAAU,MAAOkC,UAAW,gBACpCC,SAAU,OACVtI,QAAS,SAASuI,GACdvL,EAAK+D,aAAaC,EAAApD,QAAOqD,qBAAqBsH,EAAYvL,EAAMA,OAK5EuC,EAAE,wBAAwB0C,MAAM,WAE5B,IAAI3D,EAActB,EAAKiC,MAAnB,IAA4BjC,EAAKmC,IAAjC,IAAwCnC,EAAKqC,KAGjD,OAAOtC,EAAG2E,aAAapD,EADN,wBAC4B,KAIjDvB,EAAGoH,kBAAkBnH,GAErBuC,EAAEa,QAAQoI,GAAG,eAAgB,WACzB,GAAIxL,EAAKsF,YACL,MAAO,4GAOnB7E,YAAaA,EACb0K,UAAW/C","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\nimport * as _ from \"libs/underscore\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport mod_utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function(baseURL) {\n        mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n        mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n        mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n        mod_utils.cssLoadFile(\"static/style/library.css\");\n        mod_utils.cssLoadFile(\"static/style/trackster.css\");\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable ? view.overview_drawable.config.get_value(\"name\") : null;\n\n        var viz_config = {\n            view: view.to_dict(),\n            viewport: {\n                chrom: view.chrom,\n                start: view.low,\n                end: view.high,\n                overview: overview_track_name\n            },\n            bookmarks: bookmarks\n        };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: `${Galaxy.root}visualization/save`,\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(vis_info => {\n                Galaxy.modal.hide();\n                view.vis_id = vis_info.vis_id;\n                view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n            })\n            .error(() => {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Could Not Save\",\n                    body: \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets({ dbkey: view.dbkey }, new_tracks => {\n                            _.each(new_tracks, track => {\n                                view.add_drawable(tracks.object_from_template(track, view, view));\n                            });\n                        });\n                    }\n                },\n                {\n                    icon_class: \"block--plus\",\n                    title: \"Add group\",\n                    on_click: function() {\n                        view.add_drawable(\n                            new tracks.DrawableGroup(view, view, {\n                                name: \"New Group\"\n                            })\n                        );\n                    }\n                },\n                {\n                    icon_class: \"bookmarks\",\n                    title: \"Bookmarks\",\n                    on_click: function() {\n                        // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                        force_right_panel($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\");\n                    }\n                },\n                {\n                    icon_class: \"globe\",\n                    title: \"Circster\",\n                    on_click: function() {\n                        window.location = `${self.baseURL}visualization/circster?id=${view.vis_id}`;\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        self.save_viz();\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        self.handle_unsaved_changes(view);\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\");\n\n        var new_bookmark = $(\"<div/>\")\n            .addClass(\"bookmark\")\n            .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n            .addClass(\"position\")\n            .appendTo(new_bookmark);\n\n        var position_link = $(\"<a href=''/>\")\n            .text(position)\n            .appendTo(position_div)\n            .click(() => {\n                view.go_to(position);\n                return false;\n            });\n\n        var annotation_div = $(\"<div/>\")\n            .text(annotation)\n            .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                .addClass(\"delete-icon-container\")\n                .prependTo(new_bookmark)\n                .click(() => {\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                });\n\n            var delete_icon = $(\"<a href=''/>\")\n                .addClass(\"icon-button delete\")\n                .appendTo(delete_icon_container);\n\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n        // Create view.\n        var self = this;\n\n        var view = new tracks.TracksterView(_.extend(view_config, { header: false }));\n\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(chrom_info => {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom;\n                var start = viewport_config.start;\n                var end = viewport_config.end;\n                var overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config;\n\n                var drawable_type;\n                var drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(tracks.object_from_template(drawables_config[i], view, view));\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value(\"name\") === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark[\"position\"], bookmark[\"annotation\"], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(e => {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height() / 15.0);\n                    view.viewport_container.scrollTop(view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function() {\n                        $(window).off(\"beforeunload\");\n                        window.location = `${Galaxy.root}visualization`;\n                    },\n                    Save: function() {\n                        $.when(self.save_viz()).then(() => {\n                            window.location = `${Galaxy.root}visualization`;\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = `${Galaxy.root}visualization`;\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(() => {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function() {\n        var self = this;\n        var dbkey = query_string.get(\"dbkey\");\n        var listTracksParams = {};\n\n        var dataset_params = {\n            dbkey: dbkey,\n            dataset_id: query_string.get(\"dataset_id\"),\n            hda_ldda: query_string.get(\"hda_ldda\"),\n            gene_region: query_string.get(\"gene_region\")\n        };\n\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body: `<p><ul style='list-style: disc inside none'>You can add this dataset as:<li>a new track to one of your existing, saved Trackster sessions if they share the genome build: <b>${dbkey ||\n                \"Not available.\"}</b></li><li>or create a new session with this dataset as the only track</li></ul></p>`,\n            buttons: {\n                Cancel: function() {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: `${Galaxy.root}visualization/list_tracks`,\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function() {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(function() {\n                            dataset_params.id = $(this).val();\n                            window.location = `${Galaxy.root}visualization/trackster?${$.param(dataset_params)}`;\n                        });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: `${Galaxy.root}api/genomes?chrom_info=True`,\n            data: {},\n            error: function() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function() {\n                            window.location = `${Galaxy.root}visualizations/list`;\n                        },\n                        Create: function() {\n                            self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val());\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(r => r[1]);\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes, galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += `<option value=\"${response[i][1]}\">${response[i][0]}</option>`;\n        }\n\n        // close selection/finalize template\n        html += `</select></div><div style=\"clear: both;\"></div></div><div class=\"form-row\">Is the build not listed here? <a href=\"${\n            Galaxy.root\n        }user/dbkeys?use_panels=True\">Add a Custom Build</a></div></form>`;\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function() {\n        // set title\n        $(\"#center .unified-panel-title\").text(`${view.config.get_value(\"name\")} (${view.dbkey})`);\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: `${Galaxy.root}api/datasets/${galaxy_config.app.add_dataset}`,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: function(track_data) {\n                    view.add_drawable(tracks.object_from_template(track_data, view, view));\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(() => {\n            // add new bookmark.\n            var position = `${view.chrom}:${view.low}-${view.high}`;\n\n            var annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", () => {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n"]}