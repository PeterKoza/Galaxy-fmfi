{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","Toastr","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","window","workflow_globals","iconStyle","$icon","addClass","initialize","options","show_overview","jStorage","set","css","hide_overview","app","urls","eventObj","success_callback","self","check_changes_in_active_form","before","has_changes","hide_modal","_utils2","default","url","id","close_editor","workflow","success","do_close","text","message","onbeforeunload","errlist","show_modal","i","v","Cancel","save_current_workflow","body","append","location","name","stored","show_message","errors","rectify_workflow_outputs","request","response","err_msg","Ok","focus","keyup","value","showWorkflowParameters","timer","error","setTimeout","tool_search","q","data","s","lastValue","n","index","parent","this_label","next","no_visible_tools","map","is","_workflowCanvas2","reset","datatypes","parse","ajax","Galaxy","root","async","responseText","datatypes_mapping","JSON","ext_to_type","class_to_classes","_workflowLoadAjax","type_to_type","from_simple","fit_canvas_to_nodes","draw_overview","scroll_to_nodes","_","upgrade_message","step_id","m","details","nodes","Continue","beforeSubmit","make_popupmenu","Run","Save As","OK","type","workflow_name","workflow_annotation","rename_annotation","workflow_data","stringify","done","workflow_save_as","fail","alert","to_simple","undefined","edit_workflow_outputs","new_content","node_key","clear_active_node","Edit Attributes","layout_editor","Close","Auto Re-layout","canvas_manager","workflow_index","search_input","overview_size","offsetParent","offset","Math","height","get","bind","e","d","op","opo","new_size","max","click","width","offsetX","left","offsetY","top","last_expanded","slideDown","workflows","_buildToolPanelWorkflows","wrap","slideUp","$section","onclick","rename_async","buttons","annotate_async","Copy","ButtonIcon","tooltip","upgrade_messages","parseInt","modal","step_count","copy_into_workflow","$add","on","add_node_for_subworkflow","latest_id","cv","cc","$el","workflowId","merge","k","dataType","vv","_moduleInitAjax","tool_id","remove_all","_workflowManager2","node","content_id","add_node_for_module","display_file_list","addlist","load_workflow","new_parameter_content","matches","request_data","init_field_data","form_matches","activate_node","add_node_for_tool","action_arguments","title","workflow_parameters","wf_parm_container","wf_parm_box","output_terminals","out_terminal","showAttributes","parameter_re","showForm","content","$container","inputs","config_form","match","concat","post_job_actions","emit","pja","action_argument","arg_matches","element","inArray","push","$f","substring","html","tmp","cls","o","p","prependTo","form_type","form","scrollTop","isSubType","child","prebuildNode","title_text","$title","scrollLeft","_workflowNode2","destroy","appendTo","position","node_changed","po","x","y","terminal","redraw"],"mappings":"8XAeA,SAASA,EAAkBC,GAGvB,IAAIC,EAAkBC,EAAE,iBAAiBC,WACV,IAA3BF,EAAgBG,SAChBH,EAAkBC,EAAEG,UAEpBH,EAAEI,MAAMC,YAAY,iBAdhBC,EAeYC,KAAK,cAAcF,YAAY,gBAG/CN,EAAgBQ,KAAK,oBAAoBC,OACzCT,EAAgBQ,KAAK,cAAcE,OACnCV,EAAgBQ,KAAK,mBAAmBE,OACxCV,EAAgBQ,KAAK,uBAAuBG,KAAK,WAClB,0BAAvBV,EAAEI,MAAMO,KAAK,MAEbX,EAAEI,MAAMK,OACDT,EAAEI,MAAMQ,SAAS,sBACxBZ,EAAEI,MAAMK,SAGhBV,EAAgBQ,KAAK,sBAAsBC,OAG3CT,EAAgBQ,KAAK,mBAAmBC,OACpCV,GACmBC,EAAgBQ,KAAK,sBAC3BM,IAAI,iBAhC7B,SAAAC,EAAAC,EAAAC,GACAC,IAAAA,EAAOC,EAAAA,QAAmBD,GAsCtB,GAAIE,EAAW,CApCnB,IAAAC,EAAApB,EAAA,iCAAAqB,SAAAF,GACAJ,EAASlB,OAAAA,oQAHToB,OAAOC,iBAAmBD,OAAOC,+BAQzBnB,SAAAA,KAAAA,QACAuB,WAAA,SAAAC,GA4ZQC,SAAAA,IACHxB,EAAAyB,SAAAC,IAAA,gBAAA,GACJ1B,EAND,oBAAA2B,IAAA,QAAA,OAVI3B,EAAE,mBAAmB2B,IAAI,sBAAuB,WAoBhD,SAAAC,IACI5B,EAAAyB,SAAAC,IAAO,gBAAA,GACV1B,EAAA,oBAAA2B,IAAA,QAAA,WACJ3B,EAJD,mBAAA2B,IAAA,sBAAA,YAhaA3B,IAAAA,EAAQK,OAAAA,iBAAYwB,IAApBzB,KACAL,KAAAA,QAAAA,EAsCAK,KAAK0B,KAAQP,GAAWA,EAAQO,SApChC,IAwBAX,EAAY,SAAAY,EAAAC,GAGZjB,GAFAI,aAAW,kBAAA,YACXc,EAAIb,SAAUc,gCACdnB,EAAOoB,SAAPC,YA0CQ,OAzCXC,kBACJL,GAsCmBA,KAjCZC,EAAIA,SAAQhB,2BACZqB,EAAAC,QAAKhB,SACLiB,IAAajB,OAAAA,KAAb,iBAAyCU,EAAzCV,QAAAkB,GACIC,KAAAA,MACAT,MAAKU,SAAST,EAAAA,SAAAA,aACdU,QAAID,SAAYV,GACZ,IAAIY,EAAAA,EAAAA,UAAWC,KAAXD,EAAWE,SACX9B,GAAAA,EAAAA,OAAO+B,CACP/B,EAAAA,SAAOd,eAFX,IAAA8C,EAAAjD,EAAA,SAIAiB,EAAAA,KAAOiC,EAAAA,OACH,SAAAC,EAAAC,GAGIC,EAAAA,SACAP,KAAAM,GACIE,SAAAA,KAGRC,EAAAC,OAAAP,QATJM,EAAAlC,SAAA,YAcAJ,EAAAA,SAAOd,KAASsD,EAAhBC,KACHzB,EAAAU,SAAAP,aAAA,EAtBLH,EAAAU,SAAAgB,QAAA,EAwBIL,EAAAA,yBACAM,EAAaC,OACRlB,OAAST,WAAAA,kBAAdqB,GACUZ,GAAAA,cAGFX,GAAAA,IACHK,eAGLJ,MAAKU,SAASmB,GACd7C,OAAAiC,WAAMa,0BAAQC,EAAAC,SAAAC,GAAA7B,iBAMNrC,EAAA,sBACIuD,MAAAA,WACAvD,EAAAI,MAAA+D,QACAnE,EAAAA,MAAAA,WAICoE,MAAA,WAIJ,GAFApE,EAAAI,MAAAuB,IATD,aASO,UAENvB,KAAAiE,MAAAnE,OAAA,EACD+B,GAAcyB,QACdzB,GAAAA,KAAKU,OAASP,KAAAA,UAAd,CAEAH,EAAAA,MAAAA,SAAKqC,iBAGGJ,IAAAA,EAAAA,KAAAA,MAEP9D,KAJDmE,OAKIvC,aAAAA,KAAAA,OAGPhC,EA9BS,mBAAAS,OA+BV+D,KAAAA,MAAOC,WAAST,WACZ/C,EAAAA,IACHgB,EAAAH,KAAA4C,aAjCLC,EAAAA,GAXJ,SAAAC,GA0DuB1E,GATrBF,EAAF,sBACsBQ,OAEdR,EAAA,uBAAAQ,OAGAR,EAAA,uBACYO,KAAc,cAC1BC,OAC2B,GAAZN,EAAfA,OAA2B,CAEXmE,IAALQ,EAAc7E,EAAK8E,IAAAA,EAAvB,SAAkCC,EAAA5B,GAAlC,MAAA,QAAkC4B,IAErC/E,EAAiB6E,GAAAnE,KAAA,SAAAsE,EAAjBvC,GAEAzC,EAAAA,QAAAyC,EAAA,MACAwC,SACA5D,SAAA,gBACgBrB,EAAAA,QAAAyC,EAAA,MACM8B,SACrB9D,OACDwE,SACAA,SACwBxE,OAENiE,SAGNjE,SAGAT,EAAA,mBAAAU,KAAA,WAOI,IANF,IAAAwE,EAAFlF,EAAAI,MACA+E,EAAAD,EAAAC,OACEC,GACQ,EAGN,IAAAD,EAAAjF,QAAAiF,EAAAvE,SAAA,cAAA,CACUyE,GAAIT,EAAMU,GAAA,YAAA,CAAAF,GAAA,EAApB,MAEUD,EAACH,EAAOvC,OAKdzC,GALJkF,EAAA1E,cAiBIR,EAAA,sBAAsBmF,OAEtBnF,EAAA,mBAAAQ,QAEI,SAEI,KAEA2E,KAAAA,UAAAA,KAAAA,QAIJD,KAAAA,eAAAA,OAAAA,iBAAW1E,eAAX,IAAA+E,EAAAhD,QACHnC,KACJJ,EAAA,oBACJA,EAAA,cAIJI,KAAAoF,QAKbpF,KAAAqF,UAAKX,KAALY,MACH1F,EAnFL2F,MAkGQnD,IAAQoD,OAAOC,KAAf,gBAbRC,OAAA,IACAC,cAkBA3F,KAAK4F,kBAAoBC,KAAKP,MAT9B1F,EAAA2F,MACAnD,IAAKiD,OAAYQ,KAAjB,wBAEQzD,OAAQoD,IACRE,cAKR1F,KAAA8F,YAAKF,KAAAA,kBACCL,kBACEnD,KAAAA,aAAeqD,KAAfG,kBAAAG,iBAUR/F,KAAKgG,kBAAkBnE,EAAKV,QAAQkB,IALpCG,QAAA,SAAAgC,GACA3C,EAAKiE,QACLjE,EAAKoE,SAALC,YAAyBN,GAAAA,GAOjB/D,EAAKU,SAASP,aAAc,EALpCH,EAAAU,SAAA4D,sBACAtE,EAAKmE,kBACDxD,EAAAA,eAAS4D,gBAELvE,IAAAA,EAAcqE,GACdrE,EAAAA,KAAAA,EAAKU,MAASP,SAAAA,EAAAA,GACdH,IAAAA,EAAcsE,GACdtE,EAAKwE,SACLxE,GAAAA,OAAoBuE,EAAAA,OAApBvE,SAEAyE,EAAAhG,KAAIiG,EAAAA,iBAAJC,GAAA,SAAAC,GACEnG,GAAAA,OAAiBmG,EAAjBnG,UAEEoG,IACIA,GAAAA,aAAuBjD,SAAvB+C,EAAA,IAAA,GAAAE,KACH7E,EAAAU,SAAAoE,MAAAH,GAAAlD,KADGoD,OAEGlC,EAFHkC,gBAKJH,EACIA,OAAAA,WAGH,+BAHGA,+FAKJA,EALIA,aAKRK,SAQO3E,aAGPJ,aAEJgF,EAAAA,0BAECA,aAAA,SAAArC,GAvCLhB,aAAA,mBAAA,eA6CQ3C,OAAAiG,gBACAC,eAAKnH,EAAA,6BACDiB,KAAAA,EACHmG,UAeDC,WACI,IAAA9D,EAAAvD,EAIA,sSAGIsH,OAAAA,WAAAA,yBAFG/D,GAGHqB,GAAAA,WACI2C,IAAAA,EACAC,EAAAA,oBAAAA,MAAAA,OAAqBC,EACrBC,EAAAA,oBAAe7G,MADf2G,WAEIvF,EAAOgE,SAAK0B,KACfF,EAAAzH,EAAA,kBAAAa,MAAAX,OAAA,EAAAF,EAAA,kBAAAa,MAAA,GALCb,EAAA2F,MAHHnD,IAWFoF,EAAK9F,KAAA+F,iBACF5G,KAAAA,OACAA,MACAoB,cAAAA,EAEHyF,oBAAWL,EACRpF,cAAAA,WACA0F,OAAM9B,KAAA0B,UAAA1F,EAAAU,SAAAqF,iBAzBtBJ,KAAA,SAAAnF,GA8BHxB,OAAA+B,oBAAAiF,EAVmBhH,OAAOwC,SAAcmC,OAAOC,KAA5B,sBAAsDpD,EAYjEyF,eAEHJ,KAAA,WACEK,aACKC,MAAT,6EAGQD,OAAAA,cApDJhB,IAAA,WACIlF,OAAKU,SAAS0F,OAAAA,KAAdpG,mBAAAA,EAAAV,QAAAkB,IAEJ6F,kBAAkBC,WAClBC,EAAO9F,SAAAA,qBADP+F,iBAmGR,WACI7G,EAAAA,SAAAA,SACHK,EAFDU,SAEO4D,sBACH/E,EAAAA,kBACHS,EAAAyG,eAAAlC,iBAnGDgC,MA1RA,WAEAzI,GADAA,EAAAA,SAAAA,+BACAA,UAAgBQ,EAAKoC,SAAAP,YAArB,CACArC,IAAAA,EAAgBQ,WAChBR,OAAAA,oBAAqBkI,EACbjI,OAAAG,SAAasD,SAAUxB,EAAAH,KAAA6G,gBAEvB3I,OAAEkD,WAFN,wBAIIlD,kEALRqD,OAAAhB,WAQAtC,eAAqB,WAsCDuD,EAAsB,KAAMT,MAjCxC+F,aAAe7I,SAI9BkB,OAAAd,SAAAsD,SAAAxB,EAAAH,KAAA6G,kBA4WW,IAAAE,EAAW7I,EAAAyB,SAAMqH,IAAAA,sBACJC,IAAbF,GACA7I,EAAA,oBAAegJ,KACfhJ,MAAEyB,EAJNwH,OAAAJ,IAUI7I,EAAAA,SAAEkJ,IAAA,gBACLtH,IAEDJ,IAICxB,EAAA,oBAAAmJ,KAAA,UAAA,SAAAC,EAAAC,GAhBG,IAAIC,EAAKtJ,EAAEI,MAAM0I,eAkBrBS,EAAAD,EAAAP,SACES,EAAAR,KAAFS,IAAqBC,EAAMC,SAAAN,EAAMO,QAAAL,EAAAM,MAAAP,EAAAL,UAAAI,EAAAS,QAAAP,EAAAQ,MAC7B/J,EAAAyB,SAAMC,IAAA,gBAAwB8H,EAA9B,QAmBJxJ,EAAA,mBAAA0J,MAAA,WACA,QAAE1J,EAAA,oBAAuBQ,IAAzB,SACEoB,IAEAJ,MAKUwI,OAAAA,eAAAA,WACAzG,GAAAA,UAAAA,EAAK0G,SAAU7H,YAClB,MAJD,kEAQHhC,KAAAmB,QATD2I,UAAAhK,OAAA,GAUHF,EAZD,SAPSO,KAAK,aAqBdiD,OAAApD,KAAA+J,4BAGAnK,EAAA,uBAAAQ,OACAR,EAAAA,+BAAyBoK,KAAA,oBACrBpK,IAAAA,EAAE,KACFA,EAAA,wBAAAU,KAAA,WACH,IAHD6C,EAAAvD,EAAAI,MAAA+E,KAAA,uBAIAnF,EAAAI,MAAAsJ,MAAA,WACAnG,EAAA+B,GAAA,YAna4B0E,GAAAA,EAAAK,QAAA,QAiZhBL,EAAgBzG,EA6BhC4G,EAAAA,UAA0B,UAElBG,EAAAA,QACA,QASGN,EAAaE,WAMRK,EAAAA,EAAAA,SAAAA,gBAAS,gBAAWtI,EAAAH,KAAA0I,aAAA,YAGfxK,EAAA,iBAAA0J,MAFD,WAII9D,OADA5F,EAAA,aAAA0J,SACA9D,KAGI6E,EAAAA,EAAAA,SACIpH,sBACIuC,sBACH3D,EAAAH,KAAA4I,eACDC,iBACI/E,IACA3D,EACH,IAIhBkI,yBAAA,WAvBwB,IAAAlI,EAAA7B,KAyB7BkK,EAAAtK,EAIQiC,mLA6Df,OA/CDyE,EAAAhG,KAAAN,KAAAmB,QAAA2I,UAAA,SAAAvH,GACA,GAAIV,EAAOQ,KAAXR,EAAAV,QAAAkB,GAAA,CACA,IAAK2D,EAAAA,IAAAA,EAAAA,QAALwE,YACIhI,KAAS,aACLX,IAAKU,uBACLkI,QAAA,mCACAN,QAAI5D,WACG/B,EAAKkG,WAAkB,EAC1BnE,EAAAA,mBAAAA,EAA+BoE,GAAAA,EAAArH,MAC/BkC,OAAAoF,MAAAvK,MAGAkG,MAAAA,UALJpD,KAAAA,kBAAAZ,EAAAsI,WAAA,iCAOItE,SACOzD,OACH,WAMD0C,OAAAoF,MAAAxK,QAENmK,KAAA,WAtB0B/E,OAAAoF,MAAAxK,OAwBjByB,EAAAiJ,mBAAevI,EAAAF,GAAAE,EAAAe,aAO9ByH,EAAAnL,EAAA,QACE2C,KAAL,OAAsBA,KACjBA,KAALA,EAAuBzB,MA1gBKkK,GAAA,QAAA,WAydZnJ,EAAKoJ,yBAAyB1I,EAAS2I,UAAW3I,EAASe,QAqDvE6H,EAAOhL,KAAA,kBAAXiD,OACIgI,EAAKxL,UACTqB,SAAA,aACAmC,OAAA2H,GACI3H,OAAgBmG,EAAH8B,SAIhBnB,GAGAY,mBAAM,SAAAQ,GAEN,IAAAzJ,EAAA7B,KACDoL,KAAAA,kBAAOE,GA5hBqB9I,QAAA,SAAAgC,GA2epB3C,EAAKU,SAAS2D,YAAY1B,GAAM,GAqDtCe,IACEgB,EAAMgF,GACFnJ,EAAAA,KAAKoC,EAAK9C,iBADO,SAAA8J,EAAAxI,GAEjBwB,GAAAA,aAFiBmG,SAAAa,EAAA,IAAA,GAEjBhH,KAFiB3C,EAAAU,SAAAoE,MAAA6E,GAAAlI,KAEjBkB,OACAiH,EAAAA,KAAUzI,EAAA,SAAAD,EAHO2I,GAIVnF,GAAAA,OAAAmF,EAAA,UAriBanF,GAAA,eA0iBhCoF,EACQ9J,OAAJiB,WACA,oCADIjB,kJAGe4D,EAHf5D,SAKS+E,SAAA3E,aAGLJ,cAnjBoBgF,aAAA,SAAArC,GAkgBpBhB,aAAa,qBAAsB,gBA2DvCoI,MAAAA,WACAtF,KAAAA,UAAGtG,KAAAuC,SAAAsJ,aAHoB7L,KAA3BuC,SAAA1B,OAAAC,iBAAAyB,SAAA,IAAAuJ,EAAA3J,QAAAnC,KAAAJ,EAAA,uBAOJyG,gBAAA,WACA4E,IAEItB,EACIzC,EAHR+D,EAAAA,EAAAA,oBACIG,EAAIW,EAAAA,qBAIAzF,EADA0F,EAAAA,QAAAA,EAAY3J,SACT8I,EAAA5B,QAAA6B,EAAA7B,SAAA,EAxkBqB,EA6kB5BI,EADJsC,EAAAA,SAAAA,EAAqBpD,UACbkD,EAAAA,SAAYxJ,EAALsG,UAAA,EA7kBiB,EAilBhCqD,EAAAA,KAAAA,KAAAA,EAAmBvC,IAAAA,KAGXwC,kBAAAA,SAAAA,EAAAA,GACHvM,EAAA2F,KACD4G,EAAAA,QAAAA,MAAWhL,GACXiB,IAAO+J,KAAPzK,KAAA0K,cAvlB4B5H,MAAAnC,GAAAiJ,EAAAhF,EAAA,QAoiBpBmF,SAAU,OAsDtBvH,OAAAA,MAKIyH,gBAAIU,SAAAA,EAAAA,GACJ,IAAAxK,EAAIyK,KACJ1M,EAAAA,QAAEU,SACE4G,KAAA,OACI9E,IAAAoD,OAAAC,KAAA,6BACIjB,KAAA+H,EACI/J,QAAA,SAAAgC,GACAuH,EAAAS,gBAAIC,GACAH,EAAAA,kBAAAA,GACHzK,EAAAU,SAAAmK,cAAAX,OAMLY,kBAAA,SAAQC,EAAAA,GACJhN,IAAAA,EAAAA,KAAAA,SAAEU,YAASsM,OAAAA,EAAkBvK,GACzBrC,KAAA2L,gBAAAI,GACA7E,KAAA,OACIoF,QAAAA,EACHhG,EAAA,UAKjB2E,yBAAa,SAAA5I,EAAAwK,GACTjN,IAAAA,EAAAA,KAAEU,SAAKgM,YAAS,cAAgBO,EAAAxK,GAC5BrC,KAAA2L,gBAAI/L,GACAkN,KAAAA,cACHd,WAAA3J,EACJiE,EAAA,UAIL1G,oBAAOkN,SAAAA,EAAAA,GACHT,IAAAA,EAAAA,KAAAA,SAAAA,YAAAA,EAAAA,GACHrM,KAAA2L,gBAFDI,GAAA7E,KAAAA,EAAAZ,EAAA,UAKH4F,kBAAM,SAAAH,GACHgB,IAAAA,EAAAA,qDACAC,IAAAA,IAAAA,KAAAjB,EAAAkB,iBACHd,GAAAA,kBAAAe,EAAA,KAAAA,EAAA,YAGLC,OAtDIhB,GAAW,aAyDdjI,uBA/oB+B,WA2lB5B,IAAIkJ,EAAe,aAsDvBC,KACIN,EAAAnN,EAAA,kCACAoN,EAAUpN,EAAA,4BACVyM,EAAmBN,GACnBO,KACA1M,EAAAU,KAAAN,KAAIsN,SAAWC,MAAAA,SAAAA,EAAWpN,GACtB4L,EAAIV,aAAMzL,EAAAA,YAAA4N,QACVF,EAAAA,QAAAA,SAAevB,EAAf0B,YAAAD,OAAA,SAAAvE,GACAqE,GAAwB/K,iBAAhBA,EAAR0B,MAAA,CACQoB,IAAAA,EAAiBA,EAAAA,MAAzBqI,MAAAN,GACAX,IACAH,EAAcA,EAAAqB,OAAdlB,OAKCV,EAJD6B,kBAKIpI,EAAAA,KAAAA,EAAOqI,iBAAW,SAAArC,EAAAsC,GACrBA,EAAAlB,kBACJhN,EAAAU,KAAAwN,EAAAlB,iBAAA,SAAApB,EAAAuC,GACY3N,IAAb4N,EAAAD,EAAAL,MAAAN,GACAY,IACA1B,EAAAA,EAAAqB,OAAAK,QAMAnJ,GACAjF,EAAAU,KAAOgM,EAAKrG,SAAAA,EAALgI,IA9qBqB,IAAArO,EAAAsO,QAAAD,EAAAnB,IA2nBZA,EAAoBqB,KAAKF,OA0DzCvN,GAAA,IAAqBP,EAAoB+G,QACzCkH,EAAAA,KAAGhL,EAAH,SAAAoI,EAAAyC,GACG1M,GAAAA,QAAY0M,EAAfI,UAAA,EAAAJ,EAAAnO,OAAA,GAAGyB,WAEH6M,EAAYE,KAAAjC,GACZW,EAAW3M,SAEX0L,EAAkBC,KAAAA,GAClBgB,EAAIuB,SAMJpB,eAAI9C,WACJA,EAAAA,kBACIzK,OAGQmM,EAAAA,oBAAA1L,QAIZ+N,SAAAA,SAAAd,EAAYvB,GACZ,IACAyC,EAAIC,gBACJpM,EAAQzC,EAAR,IAAUmM,EAAA1J,GACVkL,EAAYa,EAAAA,IAAG7E,GACf,GAAA+D,GAAA,GAAIzE,EAAS1I,KAAT0I,IAAJxG,GAAAvC,OAAA,CACAsO,IAAG7M,EAAI3B,EAAAA,YAAAyC,EAAA,YAAAmM,EAAA,OAMPJ,GALI3E,EAAAA,KAASA,EACTE,EAAAA,SAAc+E,KAAE7F,SAFbyE,EAAPjI,UAAArF,KAAAqF,UAIAgF,EAAQsE,KAAAA,EAAAA,QAAkB5C,EAAA7E,MAC1BqC,EAAAA,IAASc,oBACN9I,EAAI,CAEFwH,IAAK6F,EAAmB,QAD7B7C,EACuB7E,KAAM,OAAA,UACrBrF,EAAAA,OAAKU,IAASmK,EAAAA,QAAcX,GAA5BuB,GAAAuB,KAAAxD,KAEHtC,EAAK3F,OAAWiI,QAEbxJ,OAAKU,KAAAA,MAAS4D,8BAAd,+BAIAtE,EAAAA,IAAAA,GAAKU,OACRgL,EAXLpN,KAWK,IACakC,GAAAhC,OACVkN,EAAAlN,OACAkN,EAAAuB,aAKAC,UAAA,SAAQ9F,EAAES,GAGV9J,OAFAA,EAAAA,KAAEkG,YAAY2D,GACd5E,EAAA7E,KAAA8F,YAAAjB,GACAjF,KAAEqG,aACQ+I,IACL1O,KAAKN,KAAAiG,aAAW+I,IAGxBC,aA3BL,SAAA/H,EAAAgI,EAAAlD,GA4BA,IAAAnK,EAAOkK,KACVqC,EAAAxO,EAAA,4CAlEOuP,EAASvP,EAAAA,mEAAqEsP,EAArE,gBACbxO,EAAcyO,EAAOhP,KAAK,cAAe+G,GACzCkH,EAAGhL,OAAO+L,GACVf,EAAG7M,IAAI,OAAQ3B,EAAEiB,QAAQuO,aAAe,IACxChB,EAAG7M,IAAI,MAAO3B,EAAEiB,QAAQiO,YAAc,IACtCV,EAAGhL,OAAOxD,EAAE,qCACZ,IAAImM,EAAO,IAAAsD,EAAAlN,QAASnC,MAAQiO,QAASG,IACrCrC,EAAK7E,KAAOA,EACZ6E,EAAKC,WAAaA,EAClB,IAAIuC,EAAAA,6CACA/I,OAAOC,KADP,yEAGJ2I,EAAGjO,KAAK,iBAAiBiD,OAAOmL,GAGhC,IAAIlE,EAAUzK,EAAE,qDAChByK,EAAQjH,OACJxD,EAAE,UACGqB,SAAS,8BACTqI,MAAM,SAAAN,GACH+C,EAAKuD,aAIjBlB,EAAGmB,SAAS,qBAEZ,IAAId,EAAI7O,EAAE,qBAAqB4P,WAC3Bd,EAAI9O,EAAE,qBAAqBiF,SAC3B0E,EAAQ6E,EAAG7E,QACXV,EAASuF,EAAGvF,SAoChB,OAnCAuF,EAAG7M,KACCkI,MAAOgF,EAAEhF,KAAOiF,EAAEnF,QAAU,EAAIA,EAAQ,EACxCI,KAAM8E,EAAE9E,IAAM+E,EAAE7F,SAAW,EAAIA,EAAS,IAE5CwB,EAAQsE,UAAUP,EAAGjO,KAAK,mBAC1BoJ,GAASc,EAAQd,QAAU,GAC3B6E,EAAG7M,IAAI,QAASgI,GAChB6E,EACKrF,KAAK,YAAa,WACflH,EAAKU,SAASmK,cAAcX,KAE/BhD,KAAK,UAAW,WACblH,EAAKU,SAASkN,aAAazP,MAC3B6B,EAAKU,SAAS4D,sBACdtE,EAAKyG,eAAelC,kBAEvB2C,KAAK,gBAAiB,WACnBlH,EAAKU,SAASmK,cAAcX,KAE/BhD,KAAK,OAAQ,SAASC,EAAGC,GAEtB,IAAIyG,EAAK9P,EAAEI,MACN0I,eACAC,SAEDgH,EAAI1G,EAAEO,QAAUkG,EAAGjG,KACnBmG,EAAI3G,EAAES,QAAUgG,EAAG/F,IACvB/J,EAAEI,MAAMuB,KAAMkI,KAAMkG,EAAGhG,IAAKiG,IAE5BhQ,EAAEI,MACGG,KAAK,aACLG,KAAK,WACFN,KAAK6P,SAASC,aAGvB/D","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = () => {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = () => {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = (eventObj, success_callback) => {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: `${Galaxy.root}api/workflows/${self.options.id}`,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, (i, v) => {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\"Saving workflow failed.\", response.err_msg, { Ok: hide_modal });\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(() => {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            data => {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, (n, i) => `link-${n}`);\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each((index, id) => {\n                                        // Add class to denote match.\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes`,\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes/mapping`,\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, (step, step_id) => {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += `<li>${step.errors}</li>`;\n                    }\n                    _.each(data.upgrade_messages[step_id], m => {\n                        details += `<li>${m}</li>`;\n                    });\n                    if (details) {\n                        upgrade_message += `<li>Step ${parseInt(step_id, 10) + 1}: ${\n                            self.workflow.nodes[step_id].name\n                        }<ul>${details}</ul></li>`;\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        `Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>${\n                            upgrade_message\n                        }</ul></p>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location = `${Galaxy.root}workflow/run?id=${self.options.id}`;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : `SavedAs_${self.workflow.name}`;\n                    var rename_annotation = $(\"#wf_annotation\").val().length > 0 ? $(\"#wf_annotation\").val() : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(self.workflow.to_simple());\n                            }\n                        }\n                    })\n                        .done(id => {\n                            window.onbeforeunload = undefined;\n                            window.location = `${Galaxy.root}workflow/editor?id=${id}`;\n                            hide_modal();\n                        })\n                        .fail(() => {\n                            hide_modal();\n                            alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += `<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step ${\n                        node.id\n                    } - ${node.name}</div>`;\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${\n                                output.name\n                            }' checked /></p>`;\n                        } else {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${\n                                output.name\n                            }' /></p>`;\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $.jStorage.set(\"overview-size\", `${new_size}px`);\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(() => {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = () => {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(() => {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(() => {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, workflow => {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body: `This will copy ${workflow.step_count} new steps into your workflow.`,\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(workflow.id, workflow.name);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", () => {\n                        self.add_node_for_subworkflow(workflow.latest_id, workflow.name);\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, (k, v) => {\n                    upgrade_message += `<li>Step ${parseInt(k, 10) + 1}: ${self.workflow.nodes[k].name}<ul>`;\n                    $.each(v, (i, vv) => {\n                        upgrade_message += `<li>${vv}</li>`;\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        `Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>${\n                            upgrade_message\n                        }</ul>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(this, $(\"#canvas-container\"));\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/workflows/build_module`,\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += `<option value='${out_terminal}'>${out_terminal}</option>`;\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, (k, node) => {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, d => {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (k, pja) => {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, (k, action_argument) => {\n                            var arg_matches = action_argument.match(parameter_re);\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, (k, element) => {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, (k, element) => {\n                new_parameter_content += `<div>${element.substring(2, element.length - 1)}</div>`;\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = `${cls}-${node.id}`;\n        var $container = $(`#${cls}`);\n        if (content && $container.find(`#${id}`).length == 0) {\n            var $el = $(`<div id=\"${id}\" class=\"${cls}\"/>`);\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\"workflow-view::initialize()\", \"Node not found in workflow.\");\n            }\n        }\n        $(`.${cls}`).hide();\n        $container.find(`#${id}`).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(`<div class='toolFormTitle unselectable'><span class='nodeTitle'>${title_text}</div></div>`);\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = `<div><img height='16' align='middle' src='${\n            Galaxy.root\n        }static/images/loading_small_white_bg.gif'/> loading tool info...</div>`;\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(e => {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                    .offsetParent()\n                    .offset();\n\n                var x = d.offsetX - po.left;\n                var y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}