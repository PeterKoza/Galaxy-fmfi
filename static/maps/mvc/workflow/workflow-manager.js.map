{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","Toastr","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","attemptUpdateOutputLabel","node","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","create_node","prebuildNode","type","title_text","content_id","add_node","draw_overview","activate_node","id","element","warning","workflow","remove_node","active_node","clear_active_node","remove_all","wf","each","k","v","destroy","rectify_workflow_outputs","using_workflow_outputs","has_existing_pjas","workflow_outputs","length","post_job_actions","pja_id","pja","self","node_changed","action_type","pjas_to_rem","push","i","pja_name","ot_id","ot","isWorkflowOutput","output_name","action_arguments","input_connections","input_terminals","t","cons","c","handle1","attributes","input","input_subworkflow_step_id","undefined","con_dict","act","tool_version","errors","annotation","uuid","from_simple","data","initialImport_","offset","initialImport","Object","keys","max_id","node_data","config_form","version","step","position","workflow_output","css","top","left","steps","max","parseInt","init_field_data","l","x","other_node","output_terminals","Math","addWorkflowOutput","find","attr","Galaxy","root","active_form_has_changes","make_inactive","callout","showAttributes","check_changes_in_active_form","showForm","make_active","force","showWorkflowParameters","layout","n_pred","successors","j","other","node_ids_by_level","level_parents","pred_k","sk","all_nodes","ids","sort","a","b","max_width","width","height","redraw","bounds_for_all_nodes","xmin","xmax","h_pad","ymin","v_pad","ymax","e","min","p","fit_canvas_to_nodes","n","ceil","bounds","Infinity","parent","xmin_delta","fix_delta","round_up","ymin_delta","children"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["import Connector from \"mvc/workflow/workflow-connector\";\nimport * as Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                `Workflow contains duplicate workflow output labels ${\n                    toLabel\n                }. This must be fixed before it can be saved.`\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", `wf-node-step-${node.id}`);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, (k, v) => {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, (k, node) => {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, (pja_id, pja) => {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, (k, node) => {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, (pja_id, pja) => {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, (i, pja_name) => {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, (ot_id, ot) => {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = null;\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, (i, node) => {\n            var input_connections = {};\n            $.each(node.input_terminals, (k, t) => {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, (i, c) => {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (i, act) => {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport = initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, (id, step) => {\n            var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, (name, workflow_output) => {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], (pja_id, pja) => {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, (id, step) => {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, (k, v) => {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, (l, x) => {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, (ot_id, ot) => {\n                    if (node.post_job_actions[`HideDatasetAction${ot.name}`] === undefined) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(`.callout.${ot.name}`);\n                        callout.find(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small.png`);\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, (id, node) => {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, (id, node) => {\n            $.each(node.input_terminals, (j, t) => {\n                $.each(t.connectors, (k, c) => {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, (i, ids) => {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort((a, b) => $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top);\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, (j, id) => {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, (_, node) => {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, (id, node) => {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n"]}